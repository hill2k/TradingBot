import os
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns

from .logger import logger

class ReportGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ —Ç–æ—Ä–≥–∞–º.
    """
    LOG_DIR = os.path.join("logs", "trading_logs")
    REPORT_DIR = os.path.join("logs", "reports")

    def __init__(self):
        os.makedirs(self.REPORT_DIR, exist_ok=True)
        sns.set_theme(style="darkgrid")

    def _generate_pnl_graph(self, df: pd.DataFrame, period: str, filename: str):
        """–°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ PnL."""
        if df.empty:
            return
        
        df['cumulative_pnl'] = df['pnl_usd'].cumsum()
        
        plt.figure(figsize=(12, 6))
        plot = sns.lineplot(x=df.index, y='cumulative_pnl', data=df, marker='o')
        plt.title(f'–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL –∑–∞ {period}', fontsize=16)
        plt.xlabel('–°–¥–µ–ª–∫–∞')
        plt.ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL (USD)')
        plt.xticks(rotation=45)
        plt.tight_layout()
        
        filepath = os.path.join(self.REPORT_DIR, filename)
        plt.savefig(filepath)
        plt.close()
        logger.info(f"–ì—Ä–∞—Ñ–∏–∫ PnL —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filename

    def generate_daily_report(self, date: datetime = datetime.now()):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
        date_str = date.strftime('%y%m%d')
        log_filename = f"{date_str}_trades.csv"
        log_filepath = os.path.join(self.LOG_DIR, log_filename)

        if not os.path.exists(log_filepath):
            logger.warning(f"–õ–æ–≥ —Å–¥–µ–ª–æ–∫ –∑–∞ {date.strftime('%Y-%m-%d')} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            return

        df = pd.read_csv(log_filepath)
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        total_trades = len(df)
        wins = df[df['status'] == 'WIN'].shape[0]
        losses = df[df['status'] == 'LOSS'].shape[0]
        win_rate = (wins / total_trades) * 100 if total_trades > 0 else 0
        total_pnl_usd = df['pnl_usd'].sum()
        
        avg_win = df[df['status'] == 'WIN']['pnl_usd'].mean() if wins > 0 else 0
        avg_loss = df[df['status'] == 'LOSS']['pnl_usd'].mean() if losses > 0 else 0
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        graph_filename = f"{date_str}_daily_pnl.png"
        self._generate_pnl_graph(df, f"–¥–µ–Ω—å ({date.strftime('%Y-%m-%d')})", graph_filename)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_md = f"""
# üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–æ—Ä–≥–∞–º –∑–∞ {date.strftime('%Y-%m-%d')}

## –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
- **–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫**: {total_trades}
- **–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏**: {wins}
- **–£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏**: {losses}
- **Win Rate**: **{win_rate:.2f}%**
- **–ò—Ç–æ–≥–æ–≤—ã–π PnL**: **{total_pnl_usd:+.2f} USD**
- **–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞**: {avg_win:+.2f} USD
- **–°—Ä–µ–¥–Ω—è—è —É–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞**: {avg_loss:+.2f} USD

## –ì—Ä–∞—Ñ–∏–∫ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ PnL –∑–∞ –¥–µ–Ω—å
![Daily PnL](./{graph_filename})

## –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
{df.to_markdown(index=False)}
"""
        report_filename = f"{date_str}_report.md"
        report_filepath = os.path.join(self.REPORT_DIR, report_filename)
        
        with open(report_filepath, 'w', encoding='utf-8') as f:
            f.write(report_md)
            
        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report_filepath}")

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞,
    # –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –¥–Ω–µ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤ –∑–∞ –º–µ—Å—è—Ü.