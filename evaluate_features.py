import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

import lightgbm as lgb
import xgboost as xgb
import catboost as cb

from utils.logger import logger
from data_fetcher import BybitDataFetcher
from preprocess import FeatureEngine
from config import SYMBOL, PRIMARY_TIMEFRAME, SECONDARY_SYMBOL
from indicators import add_indicators

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
EVAL_DATA_LIMIT = 8000 # –£–≤–µ–ª–∏—á–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
IMPORTANCE_PLOT_PATH = "feature_importance_ensemble.png"
IMPORTANCE_CSV_PATH = "feature_importance_ensemble.csv"
TOP_N_FEATURES = 40

def prepare_evaluation_data():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º BTC –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
    logger.info("--- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---")
    fetcher = BybitDataFetcher()
    
    raw_data = fetcher.fetch_historical_data(SYMBOL, PRIMARY_TIMEFRAME, EVAL_DATA_LIMIT)
    if raw_data is None:
        raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")

    btc_data = fetcher.fetch_historical_data(SECONDARY_SYMBOL, "60", EVAL_DATA_LIMIT)
    if btc_data is None:
        raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ BTC –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")

    logger.info("--- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≤–∫–ª—é—á–∞—è BTC) ---")
    feature_engine = FeatureEngine()
    
    btc_data_with_ta = add_indicators(btc_data)
    # –ü–µ—Ä–µ–¥–∞–µ–º is_training=True, —á—Ç–æ–±—ã FeatureEngine –Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –ø—Ä–∏–∑–Ω–∞–∫–∏, –∞ –≤–µ—Ä–Ω—É–ª –≤—Å–µ
    df_with_features = feature_engine.create_features(raw_data, df_secondary=btc_data_with_ta, is_training=True)
    
    df_with_features.replace([np.inf, -np.inf], np.nan, inplace=True)
    
    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
    # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–º—É, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –æ–±—É—á–µ–Ω–∏–∏ (4 —á–∞—Å–∞)
    prediction_horizon = 4 
    target = df_with_features['close'].pct_change(periods=prediction_horizon).shift(-prediction_horizon) * 100
    
    features = df_with_features.drop(columns=[col for col in ['open', 'high', 'low', 'close', 'volume', 'turnover'] if col in df_with_features.columns], errors='ignore')

    combined = pd.concat([features, target.rename('target')], axis=1)
    combined.dropna(inplace=True)
    
    final_features = combined.drop(columns=['target'])
    final_target = combined['target']
    
    return final_features, final_target

def run_feature_evaluation():
    """
    –û–±—É—á–∞–µ—Ç –∞–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    logger.info("--- üöÄ –ù–∞—á–∞–ª–æ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---")

    try:
        features_df, target = prepare_evaluation_data()
        feature_names = features_df.columns.tolist()
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –§–æ—Ä–º–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {features_df.shape}")

        X_train, _, y_train, _ = train_test_split(features_df, target, test_size=0.1, shuffle=False)

        logger.info("–û–±—É—á–µ–Ω–∏–µ LightGBM...")
        lgbm = lgb.LGBMRegressor(random_state=42, n_jobs=-1, verbose=-1)
        lgbm.fit(X_train, y_train)
        lgbm_importance = lgbm.feature_importances_
        logger.info("LightGBM –æ–±—É—á–µ–Ω.")

        logger.info("–û–±—É—á–µ–Ω–∏–µ XGBoost...")
        xgbr = xgb.XGBRegressor(random_state=42, n_jobs=-1, objective='reg:squarederror')
        xgbr.fit(X_train, y_train)
        xgb_importance = xgbr.feature_importances_
        logger.info("XGBoost –æ–±—É—á–µ–Ω.")

        logger.info("–û–±—É—á–µ–Ω–∏–µ CatBoost...")
        cbr = cb.CatBoostRegressor(random_state=42, verbose=0, thread_count=-1)
        cbr.fit(X_train, y_train)
        cb_importance = cbr.feature_importances_
        logger.info("CatBoost –æ–±—É—á–µ–Ω.")

        importance_df = pd.DataFrame({
            'feature': feature_names,
            'lgbm': lgbm_importance,
            'xgb': xgb_importance,
            'catboost': cb_importance
        })

        scaler = MinMaxScaler()
        importance_df[['lgbm_norm', 'xgb_norm', 'catboost_norm']] = scaler.fit_transform(
            importance_df[['lgbm', 'xgb', 'catboost']]
        )

        importance_df['ensemble_importance'] = importance_df[
            ['lgbm_norm', 'xgb_norm', 'catboost_norm']
        ].mean(axis=1)

        importance_df = importance_df.sort_values('ensemble_importance', ascending=False).reset_index(drop=True)
        
        importance_df.to_csv(IMPORTANCE_CSV_PATH, index=False)
        logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {IMPORTANCE_CSV_PATH}")

        print("\n--- –¢–æ–ø-20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∞–Ω—Å–∞–º–±–ª–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞) ---")
        print(importance_df[['feature', 'ensemble_importance']].head(20).to_string(index=False))
        print("----------------------------------------------------------\n")

        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–æ–ø-{TOP_N_FEATURES} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        plt.style.use('seaborn-v0_8-darkgrid')
        fig, ax = plt.subplots(figsize=(12, max(10, TOP_N_FEATURES / 2)))
        
        top_features = importance_df.head(TOP_N_FEATURES)
        
        sns.barplot(x='ensemble_importance', y='feature', data=top_features, palette='viridis', ax=ax)
        
        ax.set_title(f'–¢–æ–ø-{TOP_N_FEATURES} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∞–Ω—Å–∞–º–±–ª—å LGBM, XGB, CatBoost)', fontsize=16)
        ax.set_xlabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å (Ensemble Importance)', fontsize=12)
        ax.set_ylabel('–ü—Ä–∏–∑–Ω–∞–∫', fontsize=12)
        plt.tight_layout()
        
        plt.savefig(IMPORTANCE_PLOT_PATH)
        logger.info(f"–ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {IMPORTANCE_PLOT_PATH}")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == "__main__":
    run_feature_evaluation()