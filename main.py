import time
from datetime import datetime, date, timedelta

from utils.logger import logger
from utils.trade_logger import TradeLogger
from utils.reporting import ReportGenerator
import config

from data_fetcher import BybitDataFetcher
from model import HybridModel
from strategy import TradingStrategy
from trading import BybitTrader
from risk_manager import RiskManager

def run_bot():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ GARCH+LSTM —Å –ª–æ–≥–∏–∫–æ–π Smart Money v3 (—Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é)...")

    try:
        data_fetcher = BybitDataFetcher()
        hybrid_model = HybridModel(
            sequence_length=24,
            lstm_model_path='trading_bot_model.pth',
            scaler_path='scaler.pkl',
            features_path='feature_names.pkl'
        )
        strategy = TradingStrategy()
        trader = BybitTrader()
        risk_manager = RiskManager()
        trade_logger = TradeLogger()
        report_generator = ReportGenerator()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
        return

    logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    is_position_open = False
    last_day_reported = date.today() - timedelta(days=1)

    while True:
        try:
            now = datetime.now()
            
            if now.date() > last_day_reported:
                logger.info(f"–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {last_day_reported}...")
                report_generator.generate_daily_report(date=last_day_reported)
                last_day_reported = now.date()

            current_position = trader.get_open_position(config.SYMBOL)
            
            if is_position_open and current_position is None:
                logger.info("–ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏...")
                closed_trades = trader.get_closed_pnl(config.SYMBOL, limit=1)
                if closed_trades:
                    trade_logger.log_trade(closed_trades[0])
                is_position_open = False
            
            elif not is_position_open and current_position is not None:
                is_position_open = True
            
            if current_position:
                logger.info("–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.")
                time.sleep(60)
                continue

            logger.info(f"--- üèÅ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {now.strftime('%Y-%m-%d %H:%M:%S')} ---")

            market_data_primary = data_fetcher.fetch_historical_data(
                symbol=config.SYMBOL,
                interval=config.PRIMARY_TIMEFRAME,
                total_limit=config.PRIMARY_DATA_LIMIT
            )
            
            market_data_secondary = data_fetcher.fetch_historical_data(
                symbol=config.SECONDARY_SYMBOL,
                interval="60",
                total_limit=config.PRIMARY_DATA_LIMIT
            )

            if market_data_primary is None or len(market_data_primary) < config.MIN_DATA_LENGTH:
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª.")
                time.sleep(60)
                continue
            
            current_price = market_data_primary['close'].iloc[-1]
            prediction = hybrid_model.predict(market_data_primary, df_secondary=market_data_secondary)
            
            if prediction.get("success"):
                signal = strategy.generate_signal(prediction, current_price)
                if signal:
                    logger.info(f"üî• –ü–æ–ª—É—á–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal['side']} @ {current_price:.5f}")
                    if risk_manager.validate_trade(trader, config.SYMBOL):
                        balance = trader.get_usdt_balance()
                        
                        # --- –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï V5.0 ---
                        position_size = trader.calculate_position_size(
                            balance=balance,
                            entry_price=signal['entry_price'],
                            sl_price=signal['sl_price'],
                            risk_pct=config.RISK_PER_TRADE_PERCENT
                        )
                        # ----------------------------------

                        if position_size > 0:
                            trade_successful = trader.place_trade(signal, position_size)
                            if trade_successful:
                                risk_manager.record_trade()
                                is_position_open = True
                                logger.info("üéâ –°–î–ï–õ–ö–ê –£–°–ü–ï–®–ù–û –ò–°–ü–û–õ–ù–ï–ù–ê!")

            interval = config.TRADING_INTERVAL_MINUTES
            logger.info(f"--- üîö –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–∞—É–∑–∞ –Ω–∞ {interval} –º–∏–Ω—É—Ç. ---")
            time.sleep(interval * 60)

        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É (Ctrl+C). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            time.sleep(60)

if __name__ == "__main__":
    run_bot()